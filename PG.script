
##### Create Database ##############################
CREATE DATABASE homejam;


==== TEACHERS =============================================

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ALTER TABLE teachers
ADD CONSTRAINT  teacher_unique UNIQUE (email);

DROP TABLE teachers;
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

##### Create teachers Table ##############################
CREATE TABLE teachers (
  T_ID SERIAL PRIMARY KEY,
  name VARCHAR(30),
  email VARCHAR(30),
  password VARCHAR(100),
  subject VARCHAR(30),
  roll VARCHAR(30),
  createAt timestamp default now(),
  updateAt timestamp
);

+++++ ALTER TABLE +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ALTER TABLE teachers ADD COLUMN roll VARCHAR(30);


##### Insert into teachers Table ##############################

INSERT INTO teachers(name, email, password, subject)
  VALUES('teacher1', 'teacher1@some.com','123','maths');

##### Update `updateAt` teachers Table ##############################
DROP FUNCTION updateAt_func();

CREATE OR REPLACE FUNCTION updateAt_func()
RETURNS TRIGGER AS $$
BEGIN
  IF row(NEW.*) IS DISTINCT FROM row(OLD.*) THEN
    NEW.updateAt = now();
    RETURN NEW;
  ELSE
    RETURN OLD;
  END IF;
END;
$$ language 'plpgsql';
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
DROP TRIGGER update_teacher_updateAt ON teachers;

CREATE TRIGGER update_teacher_updateAt 
  BEFORE UPDATE ON teachers FOR EACH ROW EXECUTE PROCEDURE updateAt_func();
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##### Select teachers Table ##############################

SELECT * FROM teachers;

##### Update teachers Table ##############################
UPDATE teachers
SET roll = 'teacher'
WHERE email = 'steven@some.com';




==== STUDENTS =============================================================================

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
DROP TABLE students;
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

##### Create students Table ##############################
CREATE TABLE students (
  S_ID SERIAL PRIMARY KEY,
  name VARCHAR(30),
  email VARCHAR(30) UNIQUE,
  password VARCHAR(100),
  roll VARCHAR(30),
  createAt timestamp default now(),
  updateAt timestamp
);

ALTER TABLE students
ADD CONSTRAINT  students_unique UNIQUE (email);

##### Insert into students Table ##############################

INSERT INTO students(name, email, password)
  VALUES('student1', 'student1@some.com','123');


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
DROP TRIGGER update_student_updateAt ON students;

CREATE TRIGGER update_student_updateAt 
  BEFORE UPDATE ON students FOR EACH ROW EXECUTE PROCEDURE updateAt_func();
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


##### Update students Table ##############################
UPDATE students
SET roll = 'student'
WHERE email = 'nick@some.com';

SELECT e_id,class_id, classes.subject, student_id, students.name, students.email FROM enrolled 
LEFT JOIN students ON enrolled.student_id = students.S_ID
LEFT JOIN classes ON enrolled.class_id = classes.C_ID
WHERE enrolled.teacher_id = 5;





==== CLASSES ===================================================================================
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
DROP TABLE classes;
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

##### Create classes Table ##############################
CREATE TABLE classes (
  C_ID SERIAL PRIMARY KEY,
  subject VARCHAR(30),
  startAt timestamp,
  endAt timestamp,
  teacher_id INT,
  createAt timestamp default now(),
  updateAt timestamp,
  CONSTRAINT fk_Teacher
    FOREIGN KEY (teacher_id)
    REFERENCES teachers(T_ID)
);

##### Insert into classes Table ##############################

INSERT INTO classes(subject, startAt, endAt, teacher_id)
  VALUES('maths', '2021-12-10 18:07:44.473212', '2021-12-10 19:07:44.473212', 1);


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
DROP TRIGGER update_classes_updateAt ON students;

CREATE TRIGGER update_classes_updateAt 
  BEFORE UPDATE ON classes FOR EACH ROW EXECUTE PROCEDURE updateAt_func();
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##### Update classes Table ##############################
UPDATE classes
SET startAt = '2021-12-23 12:00:00'
WHERE c_id = '11' RETURNING *;


##### get classes Table ##############################
SELECT * FROM classes;


DROP FUNCTION update_class(integer,integer,anyelement,anyelement,boolean);

--on AIR--
CREATE OR REPLACE FUNCTION update_class(in_class_id INTEGER,in_teacher_id INTEGER,newValue ANYELEMENT, field ANYELEMENT, allowNull BOOLEAN DEFAULT FALSE) RETURNS ANYELEMENT AS $$
BEGIN
  IF
    (allowNull = FALSE AND newValue IS NULL) OR 
        LOWER(newValue::varchar) = 'null' OR
        LOWER(newValue::varchar) = 'undefined' OR
        (SELECT teacher_id FROM classes WHERE c_id = in_class_id) != in_teacher_id
  THEN
    RAISE EXCEPTION USING
      errcode='28000',
      message='you are not allowd to change this record',
      hint='Check your authorization. ';
  ELSE
    RETURN newValue;
  END IF;
END;
$$ LANGUAGE plpgsql;

UPDATE classes
SET startAt = update_class(11, 8, '2021-12-23 12:00:00', startAt),
    endAt = update_class(11, 8, '2021-12-23 12:02:00', endAt)
WHERE c_id = '11' RETURNING *;



==== ENROLLED ===================================================================================
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
DROP TABLE enrolled;
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

##### Create enrolled Table ##############################
CREATE TABLE enrolled (
  E_ID SERIAL PRIMARY KEY,
  teacher_id INT,
  student_id INT,
  class_id INT,
  createAt timestamp default now(),
  updateAt timestamp,
  CONSTRAINT fk_Teacher
    FOREIGN KEY (teacher_id)
    REFERENCES teachers(T_ID),
  CONSTRAINT fk_Student
    FOREIGN KEY (student_id)
    REFERENCES students(S_ID),
  CONSTRAINT fk_Class
    FOREIGN KEY (class_id)
    REFERENCES classes(C_ID)
);

##### Insert into enrolled Table ##############################

INSERT INTO enrolled(teacher_id, student_id, class_id)
  VALUES((SELECT teacher_id FROM CLASSES WHERE c_id = 11), 1, 11)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
DROP TRIGGER update_enrolled_updateAt ON students;

CREATE TRIGGER update_enrolled_updateAt 
  BEFORE UPDATE ON enrolled FOR EACH ROW EXECUTE PROCEDURE updateAt_func();
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##### Update classes Table ##############################
UPDATE classes
SET subject = 'bio'
WHERE c_id = '1';



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SELECT e_id, enrolled.teacher_id, student_id, class_id, S_ID, name, email, roll FROM enrolled 
  LEFT JOIN students ON enrolled.student_id = students.S_ID
  LEFT JOIN classes ON enrolled.class_id = classes.C_ID;


SELECT c_id, classes.subject, teachers.email FROM classes
  LEFT JOIN teachers ON classes.teacher_id = teachers.T_ID;



++ ON AIR ++
SELECT e_id, enrolled.teacher_id, student_id, class_id, students.name, students.email FROM enrolled 
  LEFT JOIN students ON enrolled.student_id = students.S_ID
  LEFT JOIN classes ON enrolled.class_id = classes.C_ID
  WHERE enrolled.teacher_id = 5;


++ ON AIR ++
SELECT e_id, class_id, enrolled.teacher_id, teachers.name, teachers.email, teachers.subject FROM enrolled 
  LEFT JOIN teachers ON enrolled.teacher_id = teachers.T_ID
  LEFT JOIN classes ON enrolled.class_id = classes.C_ID
  WHERE enrolled.student_id = 1;